# Example logstash config which you can use to index all messages in elasticsearch
# Replace <DATA_PATH> below to the path where you downloaded the Discord messages

input {
  # Channels
  file {
    id => "channels"
    codec => json
    path => "<DATA_PATH>/channels/*.json"
    start_position => "beginning"
    close_older => 1
    tags => ["channel"]
  }

  # Messages
  file {
    id => "messages"
    codec => json
    path => "<DATA_PATH>/messages/*.json"
    start_position => "beginning"
    close_older => 1
    tags => ["message"]
  }
}

filter {
  # ignore invalid json
  if "_jsonparsefailure" in [tags] {
    drop { }
  }

  if "message" in [tags] {
    # replace default timestamp with the message timestamp
    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
    }

    # set @type
    mutate {
      add_field => { "@type" => "message" }
    }

    prune {
      whitelist_names => ["id", "@timestamp", "@type", "content", "channel_id", "author", "attachments"]
    }

    # add the channel name to the message (slow and depends on order, e.g. channel must be indexed before messages)
    # elasticsearch {
    #   hosts => ["localhost:9200"]
    #   enable_sort => false
    #   query => "id:%{channel_id}"
    #   fields => { "name" => "channel_name" }
    # }
  }

  if "channel" in [tags] {
    # set @type
    mutate {
      add_field => { "@type" => "channel" }
    }

    prune {
      whitelist_names => ["id", "@timestamp", "@type", "name", "parent_id", "guild_id", "recipients", "owner_id", "last_message_id"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["localhost:9200"]

    # replace the default _id with the message/channel id
    document_id => "%{[id]}"
  }
  stdout { codec => rubydebug }
}
